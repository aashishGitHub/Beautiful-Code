using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Collections.Generic;

namespace SimpleApp
{
    class Recursion
    {
        private int[] lookup;            
        public void DynamicPrograming()
        {
            int result = simpleRecursiveFibonacci(5);
            Assert.AreEqual(8, result);            
            
            //memoized version for Fibonacci Number for N
            var myClass = new Recursion();

            int N = 5;
            lookup = new int[N];
            lookup.Initialize();
            int resultMemoized = myClass.memoizedFibonacci(5);
            Assert.AreEqual(8, resultMemoized);

            //Tabulated Fibonacci
            int resultTabulated = myClass.TabulatedFibonacci(n);
            Assert.AreEqual(8, resultTabulated);
        }
        static int simpleRecursiveFibonacci(int n)
        {
            if (n <= 1)
            {
                return 1;
            }
            else
            {
                return simpleRecursiveFibonacci(n - 1) + simpleRecursiveFibonacci(n - 2);
            }
        }
        int memoizedFibonacci(int n)//TopDown 
        {
            if (lookup[n] == 0)// if it is not calculated, calculate and stored the value
            {
                if (n > 1)
                {
                    int result = memoizedFibonacci(n - 1) + memoizedFibonacci(n - 2);
                    lookup[n] = result;
                    return result;
                }
                else
                {
                    lookup[n] = 1;
                    return 1;
                }
            }
            else //if it is already calculated, use the stored value
            {
                return lookup[n];
            }
        }

        int TabulatedFibonacci(int n)
        {           
            int[] fib = new int[n+1];//here we take fib of size N+1 as it is Zero indexed, so the fibonacci for N (fib[n]) is (N+1)th element 
            
            fib[0] = 1;
            fib[1] = 1;

            for (int i = 2; i <= n; i++)
            {
                fib[i] = fib[i - 1] + fib[i - 2];
            }
            return fib[n];
        }
    }
}
